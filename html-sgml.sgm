<!-- $Id$ -->
<h1>HTML as an Application of SGML

<p>HTML is an application of ISO 8879:1986 -- Standard
Generalized Markup Language (SGML). SGML is a system for defining
structured document types and markup languages to represent instances
of those document types[SGML]. The public text -- DTD and SGML
declaration -- of the HTML document type definition are provided in
<hdref refid=pubtext>.

The term <emph/HTML/ refers to both the document type defined here and
the markup language for representing instances of this document type.

<h2>SGML Documents

An HTML document is an SGML document; that is, a sequence of
characters organized physically into a set of entities, and logically
as a hierarchy of elements.

The first production of the SGML grammar separates an SGML document
into three parts: an SGML declaration, a prologue, and an
instance. For the purposes of this specification, the prologue is a
DTD. This DTD describes another grammar: the start symbol is given in
the doctype declaration, the terminals are data characters and tags,
and the productions are determined by the element declarations. The
instance must conform to the DTD, that is, it must be in the language
defined by this grammar.

The SGML declaration determines the lexicon of the grammar. It
specifies the document character set, which determines a
character repertoire that contains all characters that occur in all
text entities in the document, and the code positions associated with
those characters.

The SGML declaration also specifies the syntax-reference character set
of the document, and a few other parameters that bind the abstract
syntax of SGML to a concrete syntax. This concrete syntax determines
how the sequence of characters of the document is mapped to a sequence
of terminals in the grammar of the prologue.

For example, consider the following document:

<listing><![CDATA[
<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<title>Parsing Example</title>
<p>Some text. <em>&#42;wow&#42;</em></p>
]]></listing>

An HTML user agent should use the SGML declaration that is given in
<hdref refid=decl>. According to its document character set,
<code>&amp;#42;</> refers to an asterisk character.

The instance above is regarded as the following sequence of terminals:

<ol>
<li>TITLE start-tag
<li>data characters: "Parsing Example"
<li>TITLE end-tag
<li>P start-tag
<li>data characters "Some text. "
<li>EM start-tag
<li>"*wow*"
<li>EM end-tag
<li>P end-tag
</ol>

The start symbol of the DTD grammar is HTML, and the productions
are given in the public text identified by <code>-//IETF//DTD HTML
2.0//EN</code> (<hdref refid=dtd>). Hence the terminals above parse as:

<listing><![CDATA[
   HTML
    |
    \-HEAD
    |  |
    |  \-TITLE
    |      |
    |      \-<TITLE>
    |      |
    |      \-"Parsing Example"
    |      |
    |      \-</TITLE>
    |
    \-BODY
      |
      \-P
        |
        \-<P>
        |
        \-"Some text. "
        |
        \-EM
        |  |
        |  \-<EM>
        |  |
        |  \-"*wow*"
        |  |
        |  \-</EM>
        | 
        \-</P>

]]></listing>

<h2>HTML Lexical Syntax

SGML specifies an abstract syntax and a reference concrete
syntax. Aside from certain quantities and capacities (e.g. the limit
on the length of a name), all HTML documents use the reference
concrete syntax. In particular, all markup characters are in the
repertoire of ISO 646 IRV. Data characters are drawn from the document
character set (see <hdref refid=datachrs>).

A complete discussion of SGML parsing, e.g. the mapping of a sequence
of characters to a sequence of tags and data, is left to the SGML
standard[SGML]. This section is only a summary.

<h3>Data Characters

Any sequence of characters that do not constitute markup (see
9.6 "Delimiter Recognition" of [SGML]) are mapped directly to
strings of data characters. Some markup also maps to data character
strings. Numeric character references also map to single-character
strings, via the document character set. Each reference to one of the
general entities defined in the HTML DTD also maps to a
single-character string.

For example,

<listing><![CDATA[
abc&lt;def    => "abc","<","def"
abc&#60;def   => "abc","<","def"
]]></listing>

Note that the terminating semicolon is only necessary when the
character following the reference would otherwise be recognized as
markup:

<listing><![CDATA[
abc &lt def     => "abc ","<"," def"
abc &#60 def    => "abc ","<"," def"
]]></listing>

And note that an ampersand is only recognized as markup when it
is followed by a letter or a <code/#/ and a digit:

<listing><![CDATA[
abc & lt def    => "abc & lt def"
abc &# 60 def    => "abc &# 60 def"
]]></listing>

A useful technique for translating plain text to HTML is to replace
each '<', '&', and '>' by an entity reference or numeric character
reference as follows:

<listing><![CDATA[
                 ENTITY      NUMERIC
       CHARACTER REFERENCE   CHAR REF     CHARACTER DESCRIPTION
         &       &amp;       &#38;        Ampersand 
         <       &lt;        &#60;        Less than
         >       &gt;        &#62;        Greater than
]]></listing>
<note>There are SGML mechanisms, CDATA and RCDATA, to allow most <code><</>,
<code>></>, and <code>&</> characters to be entered without the use of entity
references. Because these features tend to be used and implemented
inconsistently, and because they conflict with techniques for reducing
HTML to 7 bit ASCII for transport, they are not used in this version
of the HTML DTD.
</note>

<h3>Tags

Tags delimit elements such as headings, paragraphs, lists, character
highlighting, and links. Most HTML elements are identified in a
document as a start-tag, which gives the element name and attributes,
followed by the content, followed by the end tag. Start-tags are
delimited by <code><</> and <code>></>; end tags are delimited by
<code></</> and <code>></>. An example is:

<listing><![CDATA[
<H1>This is a Heading</H1>
]]></listing>

Some elements only have a start-tag without an end-tag. For example,
to create a line break, you use the <code/&lt;BR>/ tag.  Additionally,
the end tags of some other elements, such as Paragraph
(<code>&lt;/P></>), List Item (<code>&lt;/LI></>), Definition Term
(<code>&lt;/DT></>), and Definition Description (<code>&lt;DD></>)
elements, may be omitted.

The content of an element is a sequence of data character strings and nested 
elements. Some elements, such as anchors, cannot be nested. Anchors 
and character highlighting may be put inside other constructs. See
the HTML DTD, <hdref refid=dtd> for full details.
<note>The SGML declaration for HTML specifies SHORTTAG YES, which
means that there are other valid syntaxes for tags, such as NET tags,
<code>&lt;EM/.../</>; empty start tags, <code>&lt></code>; and empty
end-tags, <code>&lt;/></>. Until support for these idioms is widely
deployed, their use is strongly discouraged.
</note>

<h3>Names

A name consists of a letter followed by up to 71 letters, digits,
periods, or hyphens. Element names are not case sensitive, but entity
names are. For example, <code>&lt;BLOCKQUOTE></>,
<code>&lt;BlockQuote></>, and <code>&lt;blockquote></> are equivalent,
whereas <code>&amp;amp;</> is different from <code>&amp;AMP;</>.

In a start-tag, the element name must immediately follow the tag 
open delimiter <code>&lt;</>.

<h3>Attributes

In a start-tag, white space and attributes are allowed between the
element name and the closing delimiter. An attribute typically
consists of an attribute name, an equal sign, and a value, though
some attributes may be just a value. White space is allowed around
the equal sign.

The value of the attribute may be either:

<ul>
<li>A string literal, delimited by single quotes or double quotes and
not containing any occurrences of the delimiting character.
<note>Some historical implementations consider any occurrence
of the <code>></> character to signal the end of a tag. For
compatibility with such implementations, when <code>></> appears in an
attribute value, it should be represented with a numeric
character reference. For example,
<code>&lt;IMG SRC="eq1.jpg" alt="a&gt;b"></> should be written
<code>&lt;IMG SRC="eq1.jpg" alt="a&amp;#62;b"></> or
<code>&lt;IMG SRC="eq1.jpg" alt="a&amp;gt;b"></>.
</note>

<li>A name token (a sequence of letters, digits, periods, or hyphens).
<note>Some historical implementations allow any character 
except space or <code>></> in a name token.
</note>
</ul>

In this example, <tag/img/ is the element name, <attr/src/ is the
attribute name, and <code>http://host/dir/file.gif</code> is the
attribute value:

<listing><![CDATA[
<img src='http://host/dir/file.gif'>
]]></listing>

A useful technique for computing an attribute value literal for a
given string is to replace each quote and space character by an
entity reference or numeric character reference as follows:

<listing><![CDATA[
                 ENTITY      NUMERIC
       CHARACTER REFERENCE   CHAR REF     CHARACTER DESCRIPTION
         TAB                 &#9;         Tab
         LF                  &#10;        Line Feed
         CR                  &#13;        Carriage Return
                             &#32;        Space
         "       &quot;      &#34;        Quotation mark 
         &       &amp;       &#38;        Ampersand 
]]></listing>

For example:

<listing><![CDATA[
<IMG SRC="image.jpg" alt="First &quot;real&quot; example">
]]></listing>


Note that the SGML declaration in section 13.3 limits the length of
an attribute value to 1024 characters.

Attributes such as ISMAP and COMPACT may be written using a minimized
syntax. The markup:

<listing><![CDATA[
<UL COMPACT="compact">
]]></listing>

can be written using a minimized syntax:

<listing><![CDATA[
<UL COMPACT>
]]></listing>
<note>Some historical implementations only understand the 
minimized syntax.
</note>

<h3>Comments

To include comments in an HTML document, use a comment declaration.  A
comment declaration consists of <code/<!/ followed by zero or more
comments followed by <code/>/.  Each comment starts with <code/--/ and
includes all text up to and including the next occurrence of
<code/--/.  In a comment declaration, white space is allowed after
each comment, but not before the first comment.  The entire comment
declaration is ignored.
<note>Some historical HTML implementations incorrectly consider 
any <code>></> character to be the termination of a comment.
</note>

For example:

<listing<![CDATA[
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HEAD>
<TITLE>HTML Comment Example</TITLE>
<!-- Id: html-sgml.sgm,v 1.5 1995/05/26 21:29:50 connolly Exp  -->
<!-- another -- -- comment -->
<!>
</HEAD>
<BODY>
<p> <!- not a comment, just regular old data characters ->
]]></listing>

<h3>Example HTML Document

<listing><![CDATA[
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<!-- Here's a good place to put a comment. -->
<HEAD>
<TITLE>Structural Example</TITLE>
</HEAD><BODY>
<H1>First Header</H1>
<P>This is a paragraph in the example HTML file. Keep in mind 
that the title does not appear in the document text, but that 
the header (defined by H1) does.</P>
<OL>
<LI>First item in an ordered list.
<LI>Second item in an ordered list.
  <UL COMPACT>
  <LI> Note that lists can be nested;
  <LI> Whitespace may be used to assist in reading the 
       HTML source.
  </UL>
<LI>Third item in an ordered list.
</OL>

<P>This is an additional paragraph. Technically, end tags are 
not required for paragraphs, although they are allowed. You can 
include character highlighting in a paragraph. <EM>This sentence 
of the paragraph is emphasized.</EM> Note that the &lt;/P&gt; 
end tag has been omitted.
<P>
<IMG SRC ="triangle.xbm" alt="Warning: ">
Be sure to read these <b>bold instructions</b>.
</BODY></HTML>
]]></listing>

