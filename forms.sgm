<h1>Form-based Input Elements

<p>Forms are created by placing input fields within paragraphs,
preformatted/literal text, and lists. This gives considerable
flexibility in designing the layout of forms.

<p>The following elements are used to create forms:

<tl>
<tli>FORM:

A form within a document.

<tli>INPUT:

One input field.

<tli>OPTION:

One option within a Select element.

<tli>SELECT:

A selection from a finite set of options.

<tli>TEXTAREA:

A multi-line input field.
</tl>

<p>Each variable field is defined by an Input, Textarea, or Option
element and must have an NAME attribute to identify its value in the
data returned when the form is submitted.

<p>Example of use (a questionnaire form):

<listing><![CDATA[
<H1>Sample Questionnaire</H1>
<P>Please fill out this questionnaire:
<FORM METHOD="POST" ACTION="http://www.w3.org/sample">
<P>Your name: <INPUT NAME="name" size="48">
<P>Male <INPUT NAME="gender" TYPE=RADIO VALUE="male">
<P>Female <INPUT NAME="gender" TYPE=RADIO VALUE="female">
<P>Number in family: <INPUT NAME="family" TYPE=text>
<P>Cities in which you maintain a residence:
<UL>
<LI>Kent <INPUT NAME="city" TYPE=checkbox VALUE="kent">
<LI>Miami <INPUT NAME="city" TYPE=checkbox VALUE="miami">
<LI>Other <TEXTAREA NAME="other" cols=48 rows=4></textarea>
</UL>
Nickname: <INPUT NAME="nickname" SIZE="42">
<P>Thank you for responding to this questionnaire.
<P><INPUT TYPE=SUBMIT> <INPUT TYPE=RESET>
</FORM>
]]></listing>

<p>In the example above, the <tag/P/ and <tag/UL/ tags have been used to lay
out the text and input fields. The HTML interpreter is responsible for
handling which field will currently get keyboard input.

<p>Many platforms have existing conventions for forms, for example,
using Tab and Shift keys to move the keyboard focus forwards and
backwards between fields, and using the Enter key to submit the
form. In the example, the SUBMIT and RESET buttons are specified
explicitly with special purpose fields. The SUBMIT button is used to
e-mail the form or send its contents to the server as specified by the
ACTION attribute, while RESET resets the fields to their initial
values. When the form consists of a single text field, it may be
appropriate to leave such buttons out and rely on the Enter key.

<p>The Input element is used for a large variety of types of input fields.

<p>To let users enter more than one line of text, use the Textarea element.

<p>The radio button and checkbox types of input field can be used to
specify multiple choice forms in which every alternative is visible as
part of the form. An alternative is to use the Select element which is
typically rendered in a more compact fashion as a pull down combo
list.

<h2>Form

<![CDATA[
<FORM> ... </FORM>	Level 2
]]>

<p>The Form element is used to delimit a data input form. There can be
several forms in a single document, but the Form element can't be
nested.

<p>The ACTION attribute is a URL specifying the location to which the
contents of the form is submitted to elicit a response. If the ACTION
attribute is missing, the URL of the document itself is assumed. The
way data is submitted varies with the access protocol of the URL, and
with the values of the METHOD and ENCTYPE attributes.

<p>In general:

<ul>
<li>the METHOD attribute selects variations in the protocol.

<li>the ENCTYPE attribute specifies the format of the submitted data
in case the protocol does not impose a format itself.
</ul>

<p>The Level 2 specification defines@@ and requires support for the HTTP
access protocol only.

<p>When the ACTION attribute is set to an HTTP URL, the METHOD
attribute must be set to an HTTP method&nbsp;<liref refid=HTTP>. The
default method is GET, although for many applications the POST method
is preferred. With the POST method, the ENCTYPE attribute is a media
type specifying the format of the posted data; the default is
"application/x-www-form-urlencoded".

<p>The submitted contents of the form logically consist of name/value
pairs. The names are usually equal to the NAME attributes of the
various interactive elements in the form.

<NOTE>The names are not guaranteed to be unique keys, nor are the
names of form elements required to be distinct. The values encode the
user's input to the corresponding interactive elements. Fields with
null values may be omitted from the returned list of name/value pairs,
whereas those with non-null values should be included (even if the
value was not altered by the user). In particular, unselected radio
buttons and checkboxes should be excluded from the contents list.
</note>

<h2>Input

<![CDATA[
<INPUT>	Level 2
]]>

<p>The Input element represents a field whose contents may be edited
by the user.

<p>Attributes of the Input element:

<tl>
<tli>ALIGN:
Vertical alignment of the image. For use only with TYPE=IMAGE. The
possible values are exactly the same as for the ALIGN attribute of the
image element.

<tli>CHECKED:
Indicates that a checkbox or radio button is selected. Unselected
checkboxes and radio buttons do not return name/value pairs when the
form is submitted.

<tli>MAXLENGTH: Indicates the maximum number of characters that can be
entered into a text field. This can be greater than specified by the
SIZE attribute, in which case the field will scroll appropriately. The
default number of characters is unlimited.

<tli>NAME: Symbolic name used when transferring the form's
contents. The NAME attribute is required for most input types and is
normally used to provide a unique identifier for a field, or for a
logically related group of fields.

<tli>SIZE: Specifies the size or precision of the field according to
its type. For example, to specify a field with a visible width of 24
characters:

<listing><![CDATA[
INPUT TYPE=text SIZE="24"
]]></listing>

<tli>SRC: A URL or URN specifying an image. For use only with
TYPE=IMAGE.

<tli>TYPE: Defines the type of data the field accepts. Defaults to
free text. Several types of fields can be defined with the type
attribute:

<tli>CHECKBOX: Used for simple Boolean attributes, or for attributes
that can take multiple values at the same time. The latter is
represented by a number of checkbox fields each of which has the same
name. Each selected checkbox generates a separate name/value pair in
the submitted data, even if this results in duplicate names. The
default value for checkboxes is "on".

<tli>HIDDEN: No field is presented to the user, but the content of the
field is sent with the submitted form. This value may be used to
transmit state information about client/server interaction.

<tli>IMAGE: An image field upon which you can click with a pointing
device, causing the form to be immediately submitted. The coordinates
of the selected point are measured in pixel units from the upper-left
corner of the image, and are returned (along with the other contents
of the form) in two name/value pairs. The x-coordinate is submitted
under the name of the field with ".x" appended, and the y-coordinate
is submitted under the name of the field with ".y" appended. Any VALUE
attribute is ignored. The image itself is specified by the SRC
attribute, exactly as for the Image element.

<NOTE>In a future version of the HTML specification, the IMAGE
functionality may be folded into an enhanced SUBMIT field.
</note>

<tli>PASSWORD:

The same as the TEXT attribute, except that text is not displayed as
it is entered.

<tli>RADIO:

Used for attributes that accept a single value from a set of
alternatives. Each radio button field in the group should be given the
same name. Only the selected radio button in the group generates a
name/value pair in the submitted data. Radio buttons require an
explicit VALUE attribute.

<tli>RESET:

A button that when pressed resets the form's fields to their specified
initial values. The label to be displayed on the button may be
specified just as for the SUBMIT button.

<tli>SUBMIT: A button that when pressed submits the form. You can use
the VALUE attribute to provide a non-editable label to be displayed on
the button.  The default label is application-specific.  If a SUBMIT
button is pressed in order to submit the form, and that button has a
NAME attribute specified, then that button contributes a name/value
pair to the submitted data. Otherwise, a SUBMIT button makes no
contribution to the submitted data.

<tli>TEXT: Used for a single line text entry fields. Use in
conjunction with the SIZE and MAXLENGTH attributes. Use the Textarea
element for text fields which can accept multiple lines.

<tli>VALUE: The initial displayed value of the field, if it displays a
textual or numerical value; or the value to be returned when the field
is selected, if it displays a Boolean value. This attribute is
required for radio buttons.
</tl>

<h2>Option

<![CDATA[
<OPTION>	Level 2
]]>

<p>The Option element can only occur within a Select element. It
represents one choice, and can take these attributes:

<tl>
<tli>SELECTED: Indicates that this option is initially selected.

<tli>VALUE: When present indicates the value to be returned if this
option is chosen. The returned value defaults to the contents of the
Option element.
</tl>

<p>The contents of the Option element is presented to the user to
represent the option. It is used as a returned value if the VALUE
attribute is not present.

<h2>Select

<![CDATA[
<SELECT NAME=... > ... </SELECT>	Level 2
]]>

<p>The Select element allows the user to chose one of a set of
alternatives described by textual labels. Every alternative is
represented by the Option element. Attributes are:

<tl>
<tli>MULTIPLE: The MULTIPLE attribute is needed when users are allowed
to make several selections, e.g.  <tag/SELECT MULTIPLE/.

<tli>NAME: Specifies the name that will submitted as a name/value
pair.

<tli>SIZE: Specifies the number of visible items. If this is greater
than one, then the resulting form control will be a list.
</tl>

<p> The Select element is typically rendered as a pull down or pop-up
list. For example:

<listing><![CDATA[
<SELECT NAME="flavor">
<OPTION>Vanilla
<OPTION>Strawberry
<OPTION>Rum and Raisin
<OPTION>Peach and Orange
</SELECT>
]]></listing>

<p>If no option is initially marked as selected, then the first item listed is selected.

<h2>Text Area

<![CDATA[
<TEXTAREA> ... </TEXTAREA>	Level 2
]]>

<p>The Textarea element lets users enter more than one line of text. For example:

<listing><![CDATA[
<TEXTAREA NAME="address" ROWS=64 COLS=6>
HaL Computer Systems
1315 Dell Avenue
Campbell, California 95008
</TEXTAREA>
]]></listing>

<p>The text up to the end tag (&lt;/TEXTAREA>) is used to initialize
the field's value. This end tag is always required even if the field
is initially blank. When submitting a form, lines in a TEXTAREA should
be terminated using CRLF.

<p>In a typical rendering, the ROWS and COLS attributes determine the
visible dimension of the field in characters. The field is rendered in
a fixed-width font. HTML interpreters should allow text to extend
beyond these limits by scrolling as needed.

<NOTE>In the initial design for forms, multi-line text fields were
supported by the Input element with TYPE=TEXT. Unfortunately, this
causes problems for fields with long text values. SGML's default
(Reference Quantity Set) limits the length of attribute literals to
only 240 characters. The HTML 2.0 SGML declaration increases the limit
to 1024 characters.  </note>
